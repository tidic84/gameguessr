# GameGuessr - Product Requirements Document (PRD)

## 1. Vue d'ensemble du projet

**Nom**: GameGuessr - Migration Next.js avec Synchronisation Temps RÃ©el
**Version**: 2.0 (Migration complÃ¨te)
**Date**: Juillet 2025

### Description
Migration complÃ¨te de GameGuessr d'une architecture Express/Socket.io basique vers une application Next.js 14 moderne avec TypeScript, synchronisation temps rÃ©el Socket.io avancÃ©e, gestion d'Ã©tat Zustand, et interface utilisateur moderne responsive.

### Objectifs principaux
- Moderniser l'architecture technique (Express â†’ Next.js 14 + TypeScript)
- ImplÃ©menter une synchronisation temps rÃ©el robuste multi-room
- CrÃ©er une interface utilisateur moderne et responsive
- Optimiser les performances et la scalabilitÃ©
- PrÃ©parer pour dÃ©ploiement production

## 2. Ã‰tat actuel et contexte

### Code legacy analysÃ©
- `index.js` - Serveur Express basique avec Socket.io
- `game.html` - Interface client basique
- `js/game.js` - Logique client JavaScript vanilla
- `res/json/game.json` - DonnÃ©es d'images 360Â° (12 images cyberpunk)

### Architecture cible
- **Frontend**: Next.js 14 + TypeScript + Tailwind CSS
- **Backend**: Serveur Socket.io custom intÃ©grÃ© Next.js
- **Ã‰tat global**: Zustand avec hooks optimisÃ©s
- **UI**: Composants React modernes + Framer Motion
- **Maps**: Leaflet pour gÃ©olocalisation
- **3D**: Three.js pour vues panoramiques 360Â°

## 3. FonctionnalitÃ©s principales

### 3.1 SystÃ¨me de Rooms Multi-Joueurs
- CrÃ©ation de rooms publiques/privÃ©es
- Gestion des permissions (admin/player)
- CapacitÃ© jusqu'Ã  50 joueurs par room
- SystÃ¨me d'invitations par code

### 3.2 Jeu de GÃ©olocalisation
- Affichage d'images panoramiques 360Â° (Cyberpunk 2077)
- Interface de devinette (nom du lieu)
- Carte interactive Leaflet pour sÃ©lection coordonnÃ©es
- SystÃ¨me de scoring basÃ© sur prÃ©cision gÃ©ographique

### 3.3 Synchronisation Temps RÃ©el
- Timer synchronisÃ© multi-room (cÃ´tÃ© serveur)
- Transition automatique d'images
- Chat temps rÃ©el par room
- Ã‰tats de jeu synchronisÃ©s (wait/playing/end)
- ContrÃ´les administrateur temps rÃ©el

### 3.4 Interface Utilisateur Moderne
- Design responsive mobile-first
- Animations fluides (Framer Motion)
- Feedback utilisateur avancÃ©
- Interface admin contextuelle
- ThÃ¨me sombre/cyberpunk

### 3.5 Gestion des Scores et Statistiques
- Calcul de points basÃ© sur prÃ©cision + temps
- Classement temps rÃ©el
- Historique des parties
- Statistiques joueurs

## 4. SpÃ©cifications techniques

### 4.1 Stack technique
- **Framework**: Next.js 14 (App Router)
- **Language**: TypeScript strict
- **Styling**: Tailwind CSS + CSS Modules
- **Ã‰tat**: Zustand + React hooks
- **Temps rÃ©el**: Socket.io client/serveur
- **Maps**: Leaflet + React-Leaflet
- **3D**: Three.js + React-Three-Fiber
- **Animation**: Framer Motion
- **UI**: Headless UI + Lucide Icons

### 4.2 Architecture Socket.io
- Events typÃ©s TypeScript
- Gestion multi-room indÃ©pendante
- Timer serveur haute prÃ©cision (1000ms)
- Nettoyage automatique ressources
- Gestion dÃ©connexions/reconnexions

### 4.3 Performance
- Lazy loading composants/images
- Memoisation React optimisÃ©e
- Compression Socket.io
- Code splitting automatique Next.js

## 5. Phases de dÃ©veloppement

### Phase 1: Configuration et Architecture (COMPLÃ‰TÃ‰E)
- âœ… Initialisation Next.js 14 + TypeScript
- âœ… Installation dÃ©pendances
- âœ… Structure de projet moderne
- âœ… Configuration TypeScript/ESLint

### Phase 2: Migration Backend (COMPLÃ‰TÃ‰E)
- âœ… Serveur Socket.io custom
- âœ… API Routes Next.js
- âœ… Gestion rooms/users
- âœ… Types TypeScript complets

### Phase 3: Interface Utilisateur (COMPLÃ‰TÃ‰E)
- âœ… Composants React modernes
- âœ… Layout responsive
- âœ… PanoramaViewer 360Â°
- âœ… GameMap Leaflet
- âœ… Chat interface
- âœ… Store Zustand

### Phase 4: Synchronisation Temps RÃ©el (COMPLÃ‰TÃ‰E)
- âœ… Timer multi-room synchronisÃ©
- âœ… Transition automatique images
- âœ… ContrÃ´les admin temps rÃ©el
- âœ… Chat multi-room avancÃ©
- âœ… Gestion Ã©tats de jeu robuste

### Phase 5: Polish et Optimisations (EN COURS)
- ğŸ”„ Tests multi-room robustesse
- ğŸ”„ Animations et feedback UX
- ğŸ”„ Optimisations performances
- ğŸ”„ Gestion erreurs avancÃ©e
- ğŸ”„ Documentation technique

### Phase 6: FonctionnalitÃ©s AvancÃ©es
- ğŸ“‹ Persistance scores (base de donnÃ©es)
- ğŸ“‹ SystÃ¨me d'authentification
- ğŸ“‹ Statistiques avancÃ©es
- ğŸ“‹ Classements globaux
- ğŸ“‹ Replays de parties

### Phase 7: DÃ©ploiement Production
- ğŸ“‹ Configuration serveur production
- ğŸ“‹ Variables d'environnement
- ğŸ“‹ Monitoring et logs
- ğŸ“‹ CI/CD Pipeline
- ğŸ“‹ Tests de charge

## 6. CritÃ¨res d'acceptation

### 6.1 Performance
- Latence Socket.io < 100ms
- Temps de chargement initial < 3s
- Synchronisation timer prÃ©cision Â±50ms
- Support 10+ rooms simultanÃ©es

### 6.2 UX/UI
- Design responsive tous Ã©crans
- Animations fluides 60fps
- Feedback utilisateur immÃ©diat
- Interface intuitive

### 6.3 Robustesse
- Gestion dÃ©connexions gracieuse
- Nettoyage automatique ressources
- RÃ©cupÃ©ration d'erreurs
- Tests multi-utilisateurs validÃ©s

### 6.4 Code Quality
- Coverage tests > 80%
- Types TypeScript strict
- Documentation technique complÃ¨te
- Code review validÃ©

## 7. Risques et mitigation

### 7.1 Risques techniques
- **Latence Socket.io**: Optimisation events, compression
- **Synchronisation timer**: ImplÃ©mentation cÃ´tÃ© serveur
- **ScalabilitÃ©**: Architecture multi-room indÃ©pendante
- **Performance 3D**: Lazy loading, optimisation Three.js

### 7.2 Risques UX
- **ComplexitÃ© interface**: Tests utilisateurs itÃ©ratifs
- **Responsive mobile**: Design mobile-first
- **AccessibilitÃ©**: Standards WCAG respect

## 8. Timeline et ressources

### Estimation globale: 8-12 semaines
- Phase 1-4: âœ… COMPLÃ‰TÃ‰ES (6 semaines)
- Phase 5: ğŸ”„ EN COURS (2 semaines)
- Phase 6: ğŸ“‹ Ã€ VENIR (2-3 semaines)
- Phase 7: ğŸ“‹ Ã€ VENIR (1-2 semaines)

### Ressources
- 1 dÃ©veloppeur fullstack senior
- Outils: Next.js, TypeScript, Socket.io, Tailwind
- Infrastructure: Node.js, PostgreSQL (futur)

## 9. MÃ©triques de succÃ¨s

### 9.1 Techniques
- Temps de rÃ©ponse API < 200ms
- Synchronisation timer < 100ms latence
- 0 memory leaks dÃ©tectÃ©s
- Tests e2e 100% passants

### 9.2 Utilisateur
- Interface moderne et intuitive
- Jeu fluide multi-room
- Chat temps rÃ©el fonctionnel
- ContrÃ´les admin efficaces

### 9.3 Business
- Migration rÃ©ussie sans rÃ©gression
- Architecture scalable et maintenable
- Documentation technique complÃ¨te
- PrÃªt dÃ©ploiement production

---

**Status actuel**: Phase 4 complÃ©tÃ©e Ã  100%, Phase 5 en cours
**Prochaine milestone**: Tests robustesse et optimisations UX
